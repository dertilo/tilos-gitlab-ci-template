stages:
  - lint
  - build
  - test
  - deploy

default:
  tags:
    - k8s

variables:
  POETRY_VERSION: 1.5.1

.poetry:
  variables:
    PIP_CACHE_DIR: $CI_PROJECT_DIR/pip_cache
    POETRY_CACHE_DIR: $CI_PROJECT_DIR/pypoetry
  image: $DOCKER_HUB_PROXY/library/python:3.10-bullseye
  before_script:
    - pip install poetry==$POETRY_VERSION
    - poetry self add "poetry-dynamic-versioning[plugin]"
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - pip_cache
      - pypoetry
    policy: pull

.nocode_nopoetry:
  variables:
    PIP_CACHE_DIR: $CI_PROJECT_DIR/pip_cache
    GIT_STRATEGY: none # this is the most important part!
  image: $DOCKER_HUB_PROXY/library/python:3.10-bullseye


linting:
  stage: lint
  extends: .poetry
  variables:
    DEBIAN_FRONTEND: noninteractive
  script:
    - poetry install --only dev
    - poetry run pythonlinter


build:
  stage: build
  extends: .poetry
  needs:
    - job: linting
  script:
    - poetry install --only main --all-extras
    - poetry build
    - poetry export --only main,test -f requirements.txt --output test_requirements.txt
  artifacts:
    paths:
      - dist
      - test_requirements.txt
      - tests
  cache:
    policy: pull-push


test:
  stage: test
  extends: .nocode_nopoetry
  needs:
    - job: build

  variables:
    DEBIAN_FRONTEND: noninteractive
    GIT_STRATEGY: none
  before_script:
    - echo -e "machine $CI_SERVER_HOST\n
      user gitlab-ci-token\n
      password $CI_JOB_TOKEN"
      > $HOME/.netrc
  script:
    - pip install -r test_requirements.txt
    - pip install dist/*.whl
    - python -m pytest tests -s



publish:
  extends: .nocode_nopoetry
  stage: deploy
  variables:
    TWINE_PASSWORD: ${CI_JOB_TOKEN}
    TWINE_USERNAME: gitlab-ci-token
    TWINE_REPOSITORY_URL: $CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/pypi
  script:
    - pip install twine
    - python -m twine upload dist/*
  cache:
    policy: pull
  rules:
    - if: $CI_COMMIT_TAG